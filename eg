const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const bodyParser = require('body-parser');
const adminRoutes = require('./routes/adminRoutes');
const taskRoutes = require('./routes/taskRoutes');
const authRoutes = require('./routes/authRoutes');
const { updateTaskStatus } = require('./controllers/taskController');
const verifyToken = require('./utils/tokenUtils');
const authMiddleware = require('./middleware/authMiddleware');  // Import the middleware

// Initialize app
const app = express();

// Load environment variables
dotenv.config();

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.json());  // Ensure express.json() middleware is added to parse JSON bodies

// Define the routes for tasks
app.get('/api/tasks', verifyToken, async (req, res) => {
  try {
    // Your logic to fetch tasks from the database
    const tasks = await Task.find();  // Assuming Task is your model to fetch tasks
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching tasks' });
  }
});

// PUT route to update task status
app.put('/api/tasks/update-status/:id', verifyToken, updateTaskStatus);  // Update status of task with token verification

// Use routes
app.use('/api/admin',  adminRoutes);  // Protect admin routes with authentication middleware
app.use('/api/tasks', authMiddleware, taskRoutes);   // Protect task routes with authentication middleware
app.use('/api/auth', authRoutes);  // Auth routes (register and login)

// Root route handler to test if the server is running
app.get('/', (req, res) => {
  res.send('Backend is running');
});

// Start the server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
